/*===TOKENS===*/
COMPONENT                <component>
'{'                      <{>
Hidden:NEWLINE                  <>
PRIVATE                  <private>
IDENTIFIER               <void>
FUNCTION                 <function>
IDENTIFIER               <compileSource>
'('                      <(>
')'                      <)>
IDENTIFIER               <hint>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <compile dynamic source>
CLOSE_STRING             <">
'{'                      <{>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <dir>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <path>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <paths>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
FILE                     <file>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <counter>
'='                      <=>
INTEGER_LITERAL          <1>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <len>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <directories>
'='                      <=>
INTEGER_LITERAL          <0>
';'                      <;>
Hidden:NEWLINE                  <>
Hidden:LINE_COMMENT             <//do check to see if the compiled jar is already there>
VAR                      <var>
IDENTIFIER               <jarName>
'='                      <=>
IDENTIFIER               <calculateJarName>
'('                      <(>
IDENTIFIER               <getSourceDirectories>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
VAR                      <var>
IDENTIFIER               <jar>
'='                      <=>
IDENTIFIER               <getCompileDirectory>
'('                      <(>
')'                      <)>
'&'                      <&>
OPEN_STRING              <">
STRING_LITERAL           </>
CLOSE_STRING             <">
'&'                      <&>
IDENTIFIER               <jarName>
';'                      <;>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <fileExists>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <isTrustedSource>
'('                      <(>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </* add that jar to the classloader */>
Hidden:NEWLINE                  <>
FILE                     <file>
'='                      <=>
IDENTIFIER               <createObject>
'('                      <(>
OPEN_STRING              <">
STRING_LITERAL           <java>
CLOSE_STRING             <">
','                      <,>
OPEN_STRING              <">
STRING_LITERAL           <java.io.File>
CLOSE_STRING             <">
')'                      <)>
'.'                      <.>
IDENTIFIER               <init>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <addURL>
'('                      <(>
FILE                     <file>
'.'                      <.>
IDENTIFIER               <toURL>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
RETURN                   <return>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
ELSE                     <else>
'{'                      <{>
Hidden:NEWLINE                  <>
FILE                     <file>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
FILE                     <file>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <jar>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
TRY                      <try>
'{'                      <{>
Hidden:NEWLINE                  <>
IDENTIFIER               <path>
'='                      <=>
IDENTIFIER               <getCompileDirectory>
'('                      <(>
')'                      <)>
'&'                      <&>
OPEN_STRING              <">
STRING_LITERAL           </>
CLOSE_STRING             <">
'&'                      <&>
IDENTIFIER               <createUUID>
'('                      <(>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <create>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
Hidden:LINE_COMMENT             <//first we copy the source to our tmp dir>
IDENTIFIER               <directories>
'='                      <=>
IDENTIFIER               <getSourceDirectories>
'('                      <(>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <len>
'='                      <=>
IDENTIFIER               <arraylen>
'('                      <(>
IDENTIFIER               <directories>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
FOR                      <for>
'('                      <(>
';'                      <;>
IDENTIFIER               <counter>
LTE                      <lte>
IDENTIFIER               <len>
';'                      <;>
IDENTIFIER               <counter>
'='                      <=>
IDENTIFIER               <counter>
'+'                      <+>
INTEGER_LITERAL          <1>
')'                      <)>
Hidden:NEWLINE                  <>
'{'                      <{>
Hidden:NEWLINE                  <>
IDENTIFIER               <dir>
'='                      <=>
IDENTIFIER               <directories>
'['                      <[>
IDENTIFIER               <counter>
']'                      <]>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <$directoryCopy>
'('                      <(>
IDENTIFIER               <dir>
','                      <,>
IDENTIFIER               <path>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
Hidden:LINE_COMMENT             <//then we compile it, and grab that jar>
Hidden:NEWLINE                  <>
IDENTIFIER               <paths>
'='                      <=>
IDENTIFIER               <ArrayNew>
'('                      <(>
INTEGER_LITERAL          <1>
')'                      <)>
';'                      <;>
Hidden:LINE_COMMENT             <//have to write it this way so CF7 compiles>
IDENTIFIER               <ArrayAppend>
'('                      <(>
IDENTIFIER               <paths>
','                      <,>
IDENTIFIER               <path>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <jar>
'='                      <=>
IDENTIFIER               <getJavaCompiler>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <compile>
'('                      <(>
IDENTIFIER               <paths>
','                      <,>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
','                      <,>
IDENTIFIER               <jarName>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </* add that jar to the classloader */>
Hidden:NEWLINE                  <>
FILE                     <file>
'='                      <=>
IDENTIFIER               <createObject>
'('                      <(>
OPEN_STRING              <">
STRING_LITERAL           <java>
CLOSE_STRING             <">
','                      <,>
OPEN_STRING              <">
STRING_LITERAL           <java.io.File>
CLOSE_STRING             <">
')'                      <)>
'.'                      <.>
IDENTIFIER               <init>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
IDENTIFIER               <getURLClassLoader>
'('                      <(>
')'                      <)>
'.'                      <.>
IDENTIFIER               <addURL>
'('                      <(>
FILE                     <file>
'.'                      <.>
IDENTIFIER               <toURL>
'('                      <(>
')'                      <)>
')'                      <)>
';'                      <;>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </* delete the files */>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <directoryExists>
'('                      <(>
IDENTIFIER               <path>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
IDENTIFIER               <recurse>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <true>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </* save the file for when trusted source is on -*/>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <fileExists>
'('                      <(>
IDENTIFIER               <jar>
')'                      <)>
AND                      <AND>
NOT                      <NOT>
IDENTIFIER               <isTrustedSource>
'('                      <(>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
FILE                     <file>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
FILE                     <file>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <jar>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
CATCH                    <catch>
'('                      <(>
ANY                      <any>
IDENTIFIER               <e>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </* make sure the files are deleted */>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <directoryExists>
'('                      <(>
IDENTIFIER               <path>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
DIRECTORY                <directory>
IDENTIFIER               <action>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <delete>
CLOSE_STRING             <">
IDENTIFIER               <recurse>
'='                      <=>
OPEN_STRING              <">
STRING_LITERAL           <true>
CLOSE_STRING             <">
DIRECTORY                <directory>
'='                      <=>
OPEN_STRING              <">
'#'                      <#>
IDENTIFIER               <path>
'#'                      <#>
CLOSE_STRING             <">
'{'                      <{>
'}'                      <}>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
RETHROW                  <rethrow>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentGuts
      {
      (element
        (functionDeclaration
          (accessType private)
          (typeSpec (multipartIdentifier (identifier void)))
          function
          (identifier compileSource)
          (
          parameterList
          )
          (functionAttribute
            (identifier hint)
            =
            (constantExpression
              (stringLiteral " (stringLiteralPart compile dynamic source) ")
            )
          )
          (compoundStatement
            {
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier dir))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier path))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier paths))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression
                    (unaryExpression (memberExpression (identifier (cfmlFunction file))))
                  )
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier counter))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier len))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier directories))))
                )
                =
                (startExpression
                  (baseExpression (unaryExpression (primaryExpression (literalExpression 0))))
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier jarName))))
                )
                =
                (startExpression
                  (baseExpression
                    (unaryExpression
                      (memberExpression
                        (functionCall
                          (identifier calculateJarName)
                          (
                          (argumentList
                            (argument
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (memberExpression
                                      (functionCall (identifier getSourceDirectories) ( argumentList ))
                                    )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                      )
                    )
                  )
                )
              )
              (endOfStatement ;)
            )
            (statement
              (localAssignmentExpression
                var
                (startExpression
                  (baseExpression (unaryExpression (memberExpression (identifier jar))))
                )
                =
                (startExpression
                  (baseExpression
                    (baseExpression
                      (baseExpression
                        (unaryExpression
                          (memberExpression
                            (functionCall (identifier getCompileDirectory) ( argumentList ))
                          )
                        )
                      )
                      &
                      (baseExpression
                        (unaryExpression
                          (primaryExpression
                            (literalExpression (stringLiteral " (stringLiteralPart /) "))
                          )
                        )
                      )
                    )
                    &
                    (baseExpression (unaryExpression (memberExpression (identifier jarName))))
                  )
                )
              )
              (endOfStatement ;)
            )
            (statement
              (ifStatement
                if
                (condition
                  (
                  (baseExpression
                    (unaryExpression
                      (memberExpression
                        (functionCall
                          (identifier fileExists)
                          (
                          (argumentList
                            (argument
                              (startExpression
                                (baseExpression (unaryExpression (memberExpression (identifier jar))))
                              )
                            )
                          )
                          )
                        )
                      )
                    )
                  )
                  )
                )
                (statement
                  (compoundStatement
                    {
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (baseExpression
                            (unaryExpression
                              (memberExpression (functionCall (identifier isTrustedSource) ( argumentList )))
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (assignmentExpression
                                (startExpression
                                  (baseExpression
                                    (unaryExpression (memberExpression (identifier (cfmlFunction file))))
                                  )
                                )
                                =
                                (startExpression
                                  (baseExpression
                                    (unaryExpression
                                      (memberExpression
                                        (functionCall
                                          (identifier createObject)
                                          (
                                          (argumentList
                                            (argument
                                              (startExpression
                                                (baseExpression
                                                  (unaryExpression
                                                    (primaryExpression
                                                      (literalExpression (stringLiteral " (stringLiteralPart java) "))
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                            ,
                                            (argument
                                              (startExpression
                                                (baseExpression
                                                  (unaryExpression
                                                    (primaryExpression
                                                      (literalExpression (stringLiteral " (stringLiteralPart java.io.File) "))
                                                    )
                                                  )
                                                )
                                              )
                                            )
                                          )
                                          )
                                        )
                                        .
                                        (qualifiedFunctionCall
                                          (identifier init)
                                          (
                                          (argumentList
                                            (argument
                                              (startExpression
                                                (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                              )
                                            )
                                          )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              (endOfStatement ;)
                            )
                            (statement
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (memberExpression
                                      (functionCall (identifier getURLClassLoader) ( argumentList ))
                                      .
                                      (qualifiedFunctionCall
                                        (identifier addURL)
                                        (
                                        (argumentList
                                          (argument
                                            (startExpression
                                              (baseExpression
                                                (unaryExpression
                                                  (memberExpression
                                                    (identifier (cfmlFunction file))
                                                    .
                                                    (qualifiedFunctionCall (identifier toURL) ( argumentList ))
                                                  )
                                                )
                                              )
                                            )
                                          )
                                        )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            (statement (returnStatement return) (endOfStatement ;))
                            }
                          )
                        )
                        else
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction file)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction file)))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression
                                                (stringLiteral
                                                  "
                                                  #
                                                  (startExpression
                                                    (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                                  )
                                                  #
                                                  "
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    }
                  )
                )
              )
            )
            (statement
              (tryCatchStatement
                try
                (statement
                  (compoundStatement
                    {
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier path))))
                        )
                        =
                        (startExpression
                          (baseExpression
                            (baseExpression
                              (baseExpression
                                (unaryExpression
                                  (memberExpression
                                    (functionCall (identifier getCompileDirectory) ( argumentList ))
                                  )
                                )
                              )
                              &
                              (baseExpression
                                (unaryExpression
                                  (primaryExpression
                                    (literalExpression (stringLiteral " (stringLiteralPart /) "))
                                  )
                                )
                              )
                            )
                            &
                            (baseExpression
                              (unaryExpression
                                (memberExpression (functionCall (identifier createUUID) ( argumentList )))
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (tagOperatorStatement
                        (cfmlfunctionStatement
                          (cfmlFunction directory)
                          (paramStatementAttributes
                            (param
                              (multipartIdentifier (identifier action))
                              =
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (primaryExpression
                                      (literalExpression (stringLiteral " (stringLiteralPart create) "))
                                    )
                                  )
                                )
                              )
                            )
                            (param
                              (multipartIdentifier (identifier (cfmlFunction directory)))
                              =
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (primaryExpression
                                      (literalExpression
                                        (stringLiteral
                                          "
                                          #
                                          (startExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier path))))
                                          )
                                          #
                                          "
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                          (compoundStatement { })
                        )
                      )
                    )
                    (statement ;)
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier directories))))
                        )
                        =
                        (startExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall (identifier getSourceDirectories) ( argumentList ))
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier len))))
                        )
                        =
                        (startExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier arraylen)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier directories))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (forStatement
                        for
                        (
                        (endOfStatement ;)
                        (startExpression
                          (baseExpression
                            (baseExpression (unaryExpression (memberExpression (identifier counter))))
                            (compareExpressionOperator lte)
                            (baseExpression (unaryExpression (memberExpression (identifier len))))
                          )
                        )
                        (endOfStatement ;)
                        (assignmentExpression
                          (startExpression
                            (baseExpression (unaryExpression (memberExpression (identifier counter))))
                          )
                          =
                          (startExpression
                            (baseExpression
                              (baseExpression (unaryExpression (memberExpression (identifier counter))))
                              +
                              (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                            )
                          )
                        )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (assignmentExpression
                                (startExpression
                                  (baseExpression (unaryExpression (memberExpression (identifier dir))))
                                )
                                =
                                (startExpression
                                  (baseExpression
                                    (unaryExpression
                                      (memberExpression
                                        (identifier directories)
                                        (arrayMemberExpression
                                          [
                                          (startExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier counter))))
                                          )
                                          ]
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              (endOfStatement ;)
                            )
                            (statement
                              (startExpression
                                (baseExpression
                                  (unaryExpression
                                    (memberExpression
                                      (functionCall
                                        (identifier $directoryCopy)
                                        (
                                        (argumentList
                                          (argument
                                            (startExpression
                                              (baseExpression (unaryExpression (memberExpression (identifier dir))))
                                            )
                                          )
                                          ,
                                          (argument
                                            (startExpression
                                              (baseExpression (unaryExpression (memberExpression (identifier path))))
                                            )
                                          )
                                        )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              ;
                            )
                            }
                          )
                        )
                      )
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier paths))))
                        )
                        =
                        (startExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier ArrayNew)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (primaryExpression (literalExpression 1))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (startExpression
                        (baseExpression
                          (unaryExpression
                            (memberExpression
                              (functionCall
                                (identifier ArrayAppend)
                                (
                                (argumentList
                                  (argument
                                    (startExpression
                                      (baseExpression (unaryExpression (memberExpression (identifier paths))))
                                    )
                                  )
                                  ,
                                  (argument
                                    (startExpression
                                      (baseExpression (unaryExpression (memberExpression (identifier path))))
                                    )
                                  )
                                )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression (unaryExpression (memberExpression (identifier jar))))
                        )
                        =
                        (startExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall (identifier getJavaCompiler) ( argumentList ))
                                .
                                (qualifiedFunctionCall
                                  (identifier compile)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier paths))))
                                      )
                                    )
                                    ,
                                    (argument
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (memberExpression
                                              (functionCall (identifier getURLClassLoader) ( argumentList ))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    ,
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier jarName))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (assignmentExpression
                        (startExpression
                          (baseExpression
                            (unaryExpression (memberExpression (identifier (cfmlFunction file))))
                          )
                        )
                        =
                        (startExpression
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier createObject)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart java) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    ,
                                    (argument
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart java.io.File) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  )
                                )
                                .
                                (qualifiedFunctionCall
                                  (identifier init)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                      (endOfStatement ;)
                    )
                    (statement
                      (startExpression
                        (baseExpression
                          (unaryExpression
                            (memberExpression
                              (functionCall (identifier getURLClassLoader) ( argumentList ))
                              .
                              (qualifiedFunctionCall
                                (identifier addURL)
                                (
                                (argumentList
                                  (argument
                                    (startExpression
                                      (baseExpression
                                        (unaryExpression
                                          (memberExpression
                                            (identifier (cfmlFunction file))
                                            .
                                            (qualifiedFunctionCall (identifier toURL) ( argumentList ))
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                                )
                              )
                            )
                          )
                        )
                      )
                      ;
                    )
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier directoryExists)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier path))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction directory)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier recurse))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart true) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction directory)))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression
                                                (stringLiteral
                                                  "
                                                  #
                                                  (startExpression
                                                    (baseExpression (unaryExpression (memberExpression (identifier path))))
                                                  )
                                                  #
                                                  "
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (baseExpression
                            (baseExpression
                              (unaryExpression
                                (memberExpression
                                  (functionCall
                                    (identifier fileExists)
                                    (
                                    (argumentList
                                      (argument
                                        (startExpression
                                          (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                        )
                                      )
                                    )
                                    )
                                  )
                                )
                              )
                            )
                            AND
                            (baseExpression
                              (notExpression
                                NOT
                                (unaryExpression
                                  (memberExpression (functionCall (identifier isTrustedSource) ( argumentList )))
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction file)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction file)))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression
                                                (stringLiteral
                                                  "
                                                  #
                                                  (startExpression
                                                    (baseExpression (unaryExpression (memberExpression (identifier jar))))
                                                  )
                                                  #
                                                  "
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            }
                          )
                        )
                      )
                    )
                    }
                  )
                )
                (catchCondition
                  catch
                  (
                  (typeSpec (type any))
                  (identifier e)
                  )
                  (compoundStatement
                    {
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier directoryExists)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier path))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (tagOperatorStatement
                                (cfmlfunctionStatement
                                  (cfmlFunction directory)
                                  (paramStatementAttributes
                                    (param
                                      (multipartIdentifier (identifier action))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart delete) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier recurse))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression (stringLiteral " (stringLiteralPart true) "))
                                            )
                                          )
                                        )
                                      )
                                    )
                                    (param
                                      (multipartIdentifier (identifier (cfmlFunction directory)))
                                      =
                                      (startExpression
                                        (baseExpression
                                          (unaryExpression
                                            (primaryExpression
                                              (literalExpression
                                                (stringLiteral
                                                  "
                                                  #
                                                  (startExpression
                                                    (baseExpression (unaryExpression (memberExpression (identifier path))))
                                                  )
                                                  #
                                                  "
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                  (compoundStatement { })
                                )
                              )
                            )
                            (statement ;)
                            }
                          )
                        )
                      )
                    )
                    (statement (tagOperatorStatement (rethrowStatment rethrow (endOfStatement ;))))
                    }
                  )
                )
              )
            )
            }
          )
        )
      )
      }
    )
  )
)
/*======*/