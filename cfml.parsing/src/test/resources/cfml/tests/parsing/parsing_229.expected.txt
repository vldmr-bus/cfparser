/*===TOKENS===*/
Hidden:ML_COMMENT               </**
* Some explanation.
*/>
Hidden:NEWLINE                  <>
COMPONENT                <component>
'{'                      <{>
Hidden:NEWLINE                  <>
Hidden:ML_COMMENT               </**
  * Some function explanation.
  *
  * @localData Something.
  * @keyToCheck Something else.
  */>
Hidden:NEWLINE                  <>
PUBLIC                   <public>
STRING                   <string>
FUNCTION                 <function>
IDENTIFIER               <extractInfo>
'('                      <(>
REQUIRED                 <required>
STRUCT                   <struct>
IDENTIFIER               <localData>
','                      <,>
REQUIRED                 <required>
STRING                   <string>
IDENTIFIER               <keyToCheck>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
'!'                      <!>
IDENTIFIER               <isNull>
'('                      <(>
IDENTIFIER               <localData>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
IF                       <if>
'('                      <(>
IDENTIFIER               <structKeyExists>
'('                      <(>
IDENTIFIER               <localData>
','                      <,>
IDENTIFIER               <keyToCheck>
')'                      <)>
')'                      <)>
'{'                      <{>
Hidden:NEWLINE                  <>
RETURN                   <return>
IDENTIFIER               <localData>
'['                      <[>
IDENTIFIER               <keyToCheck>
']'                      <]>
';'                      <;>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
Hidden:NEWLINE                  <>
'}'                      <}>
/*===TREE===*/
(scriptBlock
  (componentDeclaration
    component
    (componentGuts
      {
      (element
        (functionDeclaration
          (accessType public)
          (typeSpec (type string))
          function
          (identifier extractInfo)
          (
          (parameterList
            (parameter
              required
              (parameterType (typeSpec (type struct)))
              (identifier localData)
            )
            ,
            (parameter
              required
              (parameterType (typeSpec (type string)))
              (identifier keyToCheck)
            )
          )
          )
          (compoundStatement
            {
            (statement
              (ifStatement
                if
                (condition
                  (
                  (baseExpression
                    (notExpression
                      !
                        (unaryExpression
                          (memberExpression
                            (functionCall
                              (identifier isNull)
                              (
                              (argumentList
                                (argument
                                  (startExpression
                                    (baseExpression (unaryExpression (memberExpression (identifier localData))))
                                  )
                                )
                              )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                  )
                (statement
                  (compoundStatement
                    {
                    (statement
                      (ifStatement
                        if
                        (condition
                          (
                          (baseExpression
                            (unaryExpression
                              (memberExpression
                                (functionCall
                                  (identifier structKeyExists)
                                  (
                                  (argumentList
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier localData))))
                                      )
                                    )
                                    ,
                                    (argument
                                      (startExpression
                                        (baseExpression (unaryExpression (memberExpression (identifier keyToCheck))))
                                      )
                                    )
                                  )
                                  )
                                )
                              )
                            )
                          )
                          )
                        )
                        (statement
                          (compoundStatement
                            {
                            (statement
                              (returnStatement
                                return
                                (startExpression
                                  (baseExpression
                                    (unaryExpression
                                      (memberExpression
                                        (identifier localData)
                                        (arrayMemberExpression
                                          [
                                          (startExpression
                                            (baseExpression (unaryExpression (memberExpression (identifier keyToCheck))))
                                          )
                                          ]
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                              (endOfStatement ;)
                            )
                            }
                          )
                        )
                      )
                    )
                    }
                  )
                )
              )
            )
            }
          )
        )
      )
      }
    )
  )
)
/*======*/
/*===DECOMPILE===*/
component {
  public string function extractInfo(required localData, required keyToCheck)     {
      if(!isNull(localData) )         {
          if(structKeyExists(localData, keyToCheck) )             {
              return localData[keyToCheck];

            };

        };

    }
}
/*======*/